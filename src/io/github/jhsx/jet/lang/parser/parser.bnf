{

  parserClass='io.github.jhsx.jet.lang.parser.JetParser'
  parserUtilClass="io.github.jhsx.jet.lang.parser.JetParserUtil"


  elementTypeHolderClass='io.github.jhsx.jet.lang.JetTypes'
  elementTypeClass='io.github.jhsx.jet.lang.psi.JetCompositeElementType'
  tokenTypeClass='io.github.jhsx.jet.lang.psi.JetTokenType'

  psiClassPrefix='Jet'
  psiImplClassSuffix='Impl'
  psiPackage='io.github.jhsx.jet.lang.psi'
  psiImplPackage='io.github.jhsx.jet.lang.psi.impl'
//  psiImplUtilClass="io.github.jhsx.jet.ide.psi.impl.JetPsiImplUtil"
  parserUtilClass="io.github.jhsx.jet.lang.parser.JetParserUtil"

  extends(".*Expr")=Expression
  extends(".*Statement")=Statement
  consumeTokenMethod(".*Expr")="consumeTokenFast"

  tokens = [
    COMMENT              =  ''
    LDOUBLE_BRACE        =  '{{'
    RDOUBLE_BRACE        =  '}}'
    LBRACKETS            =  '['
    RBRACKETS            =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    EQ                   =  '=='
    ASSIGN               =  '='
    SCOPE_ASSIGN         =  ':='
    COLON                =  ':'
    COLONCOMMA           =  ';'
    NOT_EQ               =  '!='
    NOT                  =  '!'
    COND_OR              =  '||'
    COND_AND             =  '&&'
    BIT_OR               =  '|'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    DOT                  =  '.'
    COMMA                =  ','
    MUL                  = '*'
    DIV                  = '/'
    MOD                  = '%'
    PLUS                 = '+'
    MINUS                = '-'
    TERNARY              = '?'
    IF                   = 'if'
    END                  = 'end'
    ELSE                 = 'else'
    BLOCK                = 'block'
    RANGE                = 'range'
    YIELD                = 'yield'
    EXTENDS              = 'extends'
    INCLUDE              = 'include'
    IMPORT               = 'import'
    CONTENT              = 'content'
  ]

   pin("(.)+Statement$") = 2
}

File ::= ExtendsStatement? ImportStatement*  StatementList

ExtendsStatement ::= '{{' 'extends' StringExpr '}}'
ImportStatement  ::= '{{' 'import' StringExpr '}}'

StatementList    ::= ( TEXT+ | IncludeStatement | IfStatement | BlockStatement | RangeStatement | YieldContentStatement | YieldStatement | PipelineStatement )*

fake Statement ::=


FieldChain      ::= '.' IDENT FieldChain?
FieldExpr       ::= FieldChain
FieldChainExpr  ::= Expression FieldChain

Expression ::=        OrExpr
                    | AndExpr
                    | ConditionalExpr
                    | MultiplicativeExpr
                    | AdditiveExpr
                    | CallExpr
                    | SliceExpr
                    | IndexExpr
                    | NotExpr
                    | TernaryExpr
                    | IssetExpr
                    | FieldGroup
                    | PrimaryGroup



SliceExpr ::= Expression '[' Expression? ':' Expression? ']' {pin=1}
IndexExpr ::= Expression '[' Expression ']' { pin=1}


private FieldGroup ::=   FieldExpr   | FieldChainExpr
private PrimaryGroup ::= NumberExpr  | IdentifierExpr | StringExpr | ParenthesesExpr

IssetExpr ::= 'isset' '(' expression_list ')' { pin=1}
TernaryExpr ::= Expression '?' (Expression) ':' Expression { pin=1 }
CallExpr ::= Expression '(' expression_list')' {pin=2}


private rel_op  ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private add_op  ::= '+' | '-'
private mul_op  ::= '*' | '%' | '/'

NotExpr         ::= '!' Expression { pin=1 }
OrExpr          ::= Expression '||' Expression
AndExpr         ::= Expression '&&' Expression
ConditionalExpr ::= Expression rel_op Expression
MultiplicativeExpr ::= Expression mul_op Expression
AdditiveExpr    ::= Expression add_op Expression

StringExpr     ::= RAW_STRING|STRING
IdentifierExpr ::= IDENT | '.'
NumberExpr     ::= NUMBER
ParenthesesExpr   ::= '(' Pipeline ')' {pin=1}

Pipeline      ::= Expression (':' expression_list)?  Pipe? {pin=1}
Pipe          ::= '|' Expression (':' expression_list)? Pipe? {pin=1}

private expression_list ::= (Expression (',' Expression)*)?

private assign_op ::= '=' | ':='

private set_declaration ::= (fieldOrID (',' fieldOrID)*)  assign_op Pipeline (',' Pipeline)*
IfStatement       ::= '{{' 'if' (set_declaration ';')? Pipeline '}}' StatementList (EndStatement|ElseIfStatement|ElseStatement)
ElseIfStatement   ::= '{{' 'else' 'if' (set_declaration ';')? Pipeline '}}' StatementList (EndStatement|ElseIfStatement|ElseStatement) { pin=3}
ElseStatement     ::= '{{' 'else' '}}' StatementList EndStatement
EndStatement      ::= '{{' 'end' '}}'
RangeStatement    ::= '{{' 'range' (fieldOrID (',' fieldOrID)? assign_op)? Pipeline '}}' StatementList (EndStatement|ElseStatement)
private fieldOrID ::= FieldChainExpr|IdentifierExpr

PipelineStatement ::= '{{' (set_declaration ';')? Pipeline '}}' { pin=3}
IncludeStatement  ::= '{{' 'include' StringExpr  (set_declaration ';')? Pipeline? '}}'

BlockContentStatement ::= '{{' 'content' '}}' StatementList EndStatement
BlockParameterList ::= '(' (BlockParameter (',' BlockParameter)*)? ')'
BlockParameter ::= IdentifierExpr ( '=' Expression )
BlockStatement    ::= '{{' 'block' IdentifierExpr BlockParameterList Pipeline? '}}' StatementList ( EndStatement | BlockContentStatement)


YieldParameterList ::= '(' (YieldParameter (',' YieldParameter)*)? ')'
YieldParameter ::= BlockParameter || Expression


YieldStatement           ::=     '{{' 'yield' IdentifierExpr YieldParameterList Pipeline? ('}}' | 'content' '}}' StatementList EndStatement )
YieldContentStatement    ::=     '{{' 'yield' 'content' Pipeline? '}}' { pin=3 }

